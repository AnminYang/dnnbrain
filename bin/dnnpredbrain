#! /usr/bin/env python

"""
Use CNN activation to predict brain activation

Author: Taicheng Huang @ BNU
Reviewer:
"""

import os
import argparse
import subprocess
import numpy as np
from dnnbrain.core import model_operation
from dnnbrain.utils import iofiles

try:
    from sklearn import linear_model, model_selection
except ModuleNotFoundError:
    raise Exception('Please install sklearn in your workstation')

def main():
    parser = argparse.ArgumentParser(description='Use CNN activation to predict brain activation')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar = 'CNN',
                        help = 'convolutional network name')
    parser.add_argument('-in',
                        type = str,
                        required = True,
                        metavar = 'Input Directory',
                        help = 'stimuli path')
    parser.add_argument('-layer',
                        type = int,
                        required = True,
                        metavar = 'Layer',
                        help = 'activation for specific layers')
    parser.add_argument('-channel',
                        type = int,
                        required = False,
                        metavar = 'Channel',
                        help = 'activation for specific channels')
    parser.add_argument('-brainact',
                        type = str,
                        required = True,
                        metavar = 'Nifti Activation',
                        help = 'brain activation nifti/surface file')
    parser.add_argument('-mask',
                        type = str,
                        required = True,
                        metavar = 'Nifti mask',
                        help = 'brain activation mask')
    parser.add_argument('-model',
                        type = str,
                        required = False,
                        metavar = 'Brain Model',
                        help = 'model to predict brain activation by CNN activation, by default is GLM')
    parser.add_argument('-cvfold',
                        type = int,
                        required = True,
                        metavar = 'CVFold',
                        help = 'cross validation fold number')
    parser.add_argument('-out',
                        type = str,
                        required = True,
                        metavar = 'Output Directory',
                        help = 'output directory')
    args = parser.parse_args()

	# See below is the framework of this command 
	# ------------------------------------
	# Streamline
	# ------------------------------------
	# 1 Call Yukun's code (activation extraction from 'core') to get CNN's activations. Parameters: -net, -in, -layer, -channel
	# 2 Extract brain activation from fMRI data (brainact and mask), and convert it as an array. Parameters: -brainact, -mask
	# 3 Iterately Call sklearn models to estimate accuracy. Parameters: -model, -cvfold.
	# 4 Map accuracy to Brain Images. Parameters: -out
	# 
	# -----------------------------------
	# psudo-code
	# -----------------------------------
	# cnnact = core.extract(net, in, layer, channel)
	# brainact = nib.load(brainact)
	# brainact_array = func_array(brainact)
	# model = sklearn.GLM(n_fold = cvfold)
	# model.fit(cnnact, brainact) # Check if needed to be iterated
	# acc = model.acc
	# project acc to brain
	# save(acc)
	# save(model)
	
	# DNN activation extraction 
	if args.net == 'alexnet':
        imgcropsize = (227,227)
    elif args.net == 'vgg11':
        imgcropsize = (227,227)
    else:
        raise Exception('Not a supported net, please contact the author for implementation.')
	imgloader_cls = iofiles.ImgLoader(args.in)
	imgloader = imgloader_cls.gen_dataloader(imgcropsize)
	dnn_act, dnn_picname = model_operation.dnn_activation(imgloader, args.net, args.layer, args.channel)
    
	# Brain image activation extraction
	assert args.brainact.split('.')[1:] == args.mask.split('.')[1:], "Brain activation and mask are mismatched."
    brainimg_cls = iofiles.BrainImgLoader(args.brainact)
    brainimg_data = brainimg_cls.load_brainimg()
    if args.mask:
        brainmask_cls = iofiles.BrainImgLoader(args.mask)
        brainmask_data = brainmask_cls.load_brainimg()
    else:
        brainmask_data = np.zeros_like(brainimg_data)
    assert brainimg_data.shape == brainmask_data.shape, "Shape of brainact and mask need to be same."
    brainimg_data = brainimg_data*brainmask_data
	
    # Initialize machine learning models
    if not args.model:
        args.model = 'glm'
    if args.model == 'glm':
        model = linear_model.LinearRegression()
    elif args.model == 'lasso':
        model = linear_model.Lasso()
    else:
        raise Exception('Not supported yet, please contact the author for implementation.')
    
    # Tidy DNN activation data and brain activation data
    # Not quite sure the shape of brain activation and input which data.
    pass
    
    # Cross validation
    scores = model_selection.cross_val_score(model, dnn_act, brainimg, scroing='explained_variance', cv=args.cvfold)
    
    # Save image
    out_brainimg = np.zeros_like(brainimg_data)



























if __name__ == '__main__':
    main()
