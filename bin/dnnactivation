#! /usr/bin/env python

"""
Extract activation from specific layer from a DNN
Author: YukunQu @ BNU
Reviewer:
"""

import argparse
from dnnbrain.core import model_operation
import dnnbrain.utils import iofiles

def main():
    parser = argparse.ArgumentParser(description='Extract activation from specific layer from a DNN')
    parser.add_argument('-in',
                        type = str,
                        required = True,
                        metavar = 'Input Directory',
                        help = 'stimuli path')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar = 'CNN name',
                        help = 'convolutional network name')
    parser.add_argument('-layer',
                        type = int,
                        required = True,
                        metavar = 'Layer',
                        help = 'activation for specific layers')
    parser.add_argument('-channel',
                        type = int,
                        required = False,
                        metavar = 'Channel',
                        help = 'activation for specific channels')
    parser.add_argument('-out',
                        type = str,
                        required = True,
                        metavar = 'Output Directory',
                        help = 'output directory')
    args = parser.parse_args()

	
	# See below is the framework of this command 
	# ------------------------------------
	# Streamline
	# ------------------------------------
	# 1 Call activation extraction from 'core' to get CNN's activations. Parameters: -net, -in, -layer, -channel
	# 2 Save activation data and picutre list to csv files. Parameters: -activation,-net, -out, -layer, -channel, -dnnpicname
	
	
	# DNN activation extraction 
    netloader = iofiles.NetLoader(args.net)
    imgcropsize = netloader.img_size
    transform = transforms.Compose([transform.Resize(imgcropsize),
                                    transforms.ToTensor()])                            
    picdataset = iofiles.PicDataset(args.csv, args.in, transform=transform)
    dnn_act = model_operation.dnn_activation(picdataset, args.net, args.layer, args.channel)
	
    # Save activation data
    io.save_activation_to_csv(dnn_act,args.out,args.net,args.layer,args.channel)